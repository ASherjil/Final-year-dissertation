@InProceedings{JetBench_paper,
	author="Qadri, Muhammad Yasir
	and Matichard, Dorian
	and McDonald Maier, Klaus D.",
	editor="M{\"u}ller-Schloer, Christian
	and Karl, Wolfgang
	and Yehia, Sami",
	title="JetBench: An Open Source Real-time Multiprocessor Benchmark",
	booktitle="Architecture of Computing Systems - ARCS 2010",
	year="2010",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="211--221",
	abstract="Performance comparison among various architectures is generally attained by using standard benchmark tools. This paper presents JetBench, an Open Source OpenMP based multicore benchmark application that could be used to analyse real time performance of a specific target platform. The application is designed to be platform independent by avoiding target specific libraries and hardware counters and timers. JetBench uses jet engine parameters and thermodynamic equations presented in the NASA's EngineSim program, and emulates a real-time jet engine performance calculator. The user is allowed to determine a flight profile with timing constraints, and adjust the number of threads. This paper discusses the structure of the application, thread distribution and its scalability on a custom symmetric multicore platform based on a cycle accurate full system simulator.",
	isbn="978-3-642-11950-7"
}

@InProceedings{mpbenchmark_paper,
	author    = "Hai Tao Mei and Andy Wellings",
	title     = "Using JetBench to Evaluate the Efficiency of Multiprocessor Support for Parallel Processing",
	booktitle = "Java Technologies for Real-time and Embedded Systems (JTRES)",
	year      = "2014",
	address   = "University of York, UK",
	publisher = "ACM",
	url       = "https://mpbenchmark.sourceforge.net/MeiAndWellings.pdf"
}

@misc{mobilenet_paper,
	title={MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications}, 
	author={Andrew G. Howard and Menglong Zhu and Bo Chen and Dmitry Kalenichenko and Weijun Wang and Tobias Weyand and Marco Andreetto and Hartwig Adam},
	year={2017},
	eprint={1704.04861},
	archivePrefix={arXiv},
	primaryClass={cs.CV}
}

@misc{mobilenet_competition,
	author = "Everingham, M. and Van~Gool, L. and Williams, C. K. I. and Winn, J. and Zisserman, A.",
	title = "The {PASCAL} {V}isual {O}bject {C}lasses {C}hallenge 2007 {(VOC2007)} {R}esults",
	howpublished = "http://www.pascal-network.org/challenges/VOC/voc2007/workshop/index.html"
}

@online{std_format_gcc_compiler_version,
	author  = {Bartlomiej Filipek},
	title   = {Formatting Custom Types with std::format from C++20},
	year    = {2023},
	url     = {https://www.cppstories.com/2022/custom-stdformat-cpp20/},
	urldate = {2024-04-14}
}


@article{fmt_printing_library,
	author = "André Müller",
	title = "Overview of the C++ {fmt} Library",
	journal = "Hacking C++",
	year = 2022,
	url = "https://hackingcpp.com/cpp/libs/fmt.html",
	urldate = "2024-04-14"
}


@online{cmake_about,
	author       = {},
	title        = {CMake},
	year         = {2023},
	url          = {https://cmake.org/features/},
	organization = {Kitware},
	urldate      = {2024-04-14}
}

@misc{mobilenet_repo,
	author = {universecool},
	title = {mobilenet},
	year = {2020},
	note = {GitHub repository},
	url = {https://github.com/universecool/mobilenet}
}


@online{neon_reference,
	author = {},
	title = {Arm Neon Intrinsics Reference},
	organization = {Arm},
	year = {2023},
	url = {https://arm-software.github.io/acle/neon_intrinsics/advsimd.html}
}

@INPROCEEDINGS{cmake_publication_1,
	author={Wojtczyk, Martin and Knoll, Alois},
	booktitle={2008 The Third International Conference on Software Engineering Advances}, 
	title={A Cross Platform Development Workflow for C/C++ Applications}, 
	year={2008},
	volume={},
	number={},
	pages={224-229},
	keywords={ISO standards;ANSI standards;Code standards;Standards development;Standards organizations;Libraries;Operating systems;Computer languages;Project management;Linux;Cross Platform Development;Workflow;Deployment and Maintenance},
	doi={10.1109/ICSEA.2008.41}
}

@article{cmake_publication_2,
	author = {Elmsheuser, J and Krasznahorkay, A and Obreshkov, E and Undrus, A},
	year = {2017},
	month = {10},
	pages = {072010},
	title = {Large Scale Software Building with CMake in ATLAS},
	volume = {898},
	journal = {Journal of Physics: Conference Series},
	doi = {10.1088/1742-6596/898/7/072010}
}


@book{c++_concurrency_in_action,
	author    = {Anthony Williams},
	title     = {C++ Concurrency in Action},
	publisher = {Manning Publications},
	year      = {2019},
	edition   = {2},
	pages     = {16-72},
	url       = {https://beefnoodles.cc/assets/book/C++%20Concurrency%20in%20Action.pdf}
}



@misc{c++_books_stackoverflow,
	author       = {community wiki},
	title        = {The Definitive C++ Book Guide and List},
	howpublished = {Stack Overflow},
	year         = {2008},
	note         = {Last updated 2021. URL: \url{https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list}}
}


@article{openmp_usage_hpc,
	author  = {Kshitij Mehta and Edgar Gabriel},
	title   = {Multi-Threaded Parallel I/O for OpenMP Applications},
	journal = {International Journal of Parallel Programming},
	year    = {2015},
	volume  = {43},
	number  = {2},
	pages   = {286--309},
	month   = {April},
	doi     = {10.1007/s10766-014-0306-9},
	url     = {https://doi.org/10.1007/s10766-014-0306-9},
	abstract = {Processing large quantities of data is a common scenario for parallel applications. While distributed memory applications are able to improve the performance of their I/O operations by using parallel I/O libraries, there is no support for parallel I/O operations for applications using shared-memory programming models such as OpenMP available as of today. This paper presents parallel I/O interfaces for OpenMP. We discuss the rationale of our design decisions, present the interface specification, an implementation within the OpenUH compiler and discuss a number of optimizations performed. We demonstrate the benefits of this approach on different file systems for multiple benchmarks and application scenarios. In most cases, we observe significant improvements in I/O performance as compared to the sequential version. Furthermore, we perform a comparison of the OpenMP I/O functions introduced in this paper to message passing interface I/O, and demonstrate the benefits of the new interfaces.},
	issn    = {1573-7640}
}

@misc{speedscope_app,
	author = {Jamie Wong},
	title = {speedscope},
	howpublished = {\url{https://www.speedscope.app/}},
	year = {2024},
	address = {San Francisco, California},
	organization = {GitHub}
}

@misc{telnetpp_library,
	author = {Matthew Chaplain},
	title = {telnetpp},
	howpublished = {\url{https://github.com/KazDragon/telnetpp}},
	year = {2024},
	address = {Utrecht, Netherlands},
	organization = {GitHub}
}

@misc{serverpp_library,
	author = {Matthew Chaplain},
	title = {serverpp},
	howpublished = {\url{https://github.com/KazDragon/serverpp}},
	year = {2024},
	address = {Utrecht, Netherlands},
	organization = {GitHub}
}

@misc{rasp_pi5_pi4_comparision,
	author = {Allan, Alasdair},
	title = {Benchmarking Raspberry Pi 5},
	year = {2023},
	month = {10},
	day = {20},
	howpublished = {\url{https://www.raspberrypi.com/news/benchmarking-raspberry-pi-5/}},
	organization = {Raspberry Pi Foundation}
}



